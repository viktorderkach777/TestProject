
 
pipeline {


agent any 
  parameters {
        string(name: 'TestCategory', defaultValue: '', description: 'Enter the testcategory')
    }

environment {
act = 'mmmmmmm'
act2 = 'act2'
isTriggeredByGit = ''
dotnet = '/usr/share/dotnet/dotnet'
isTestCategoryLengthEqualsNull=''

}

stages {  

stage('Checkout') {

steps {
  script {
               act = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')!= null
               act2 = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
               isTriggeredByGit = act2.toString().equals("[]")
               isTestCategoryLengthEqualsNull = (params.TestCategory).trim().length() == 0
          }    
  
       checkout scm
       echo "TestCategory = ${params.TestCategory}"       
       echo "isTriggeredByGit = ${isTriggeredByGit}"      
       echo "isTestCategoryLengthEqualsNull = ${isTestCategoryLengthEqualsNull}"
        }
  }

stage('Restore Packages') {

steps {

dir("awesome-project") {

sh "ls -la"

sh "pwd"

//sh 'dotnet --info'

//sh 'dotnet restore'

}

}

}

stage('Info') {

           steps { 
 
            dir("awesome-project") {
                sh "ls -la"
                sh "pwd" 
                                   }

                  }
               }  
 
  
  stage('NotMasterNotDevNotGitNotParam') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == false && isTestCategoryLengthEqualsNull == true && (env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev')}
            }
       steps {
                echo '----NotMasterNotDevNotGitNotParam-----'
                dir("awesome-project") {
                     sh 'dotnet restore'
                     sh 'dotnet test'
                 }
                
            }
   }
 stage('NotMasterNotDevNotGitParam') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == false && isTestCategoryLengthEqualsNull == false && (env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev')}
            }
       steps {
                echo '----NotMasterNotDevNotGitParam-----'
                dir("awesome-project") {
                     sh 'dotnet restore'
                     sh 'dotnet test'
                 }
            }
   }
 stage('NotMasterNotDevGit') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == true && (env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev')}
            }
       steps {
                echo '----NotMasterNotDevGit-----'
            }
   }
 stage('MasterDevGit') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == true && (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'dev')}
            }
       steps {
                echo '----MasterDevGit-----'
            }
   }
  stage('MasterDevNotGitNoParam') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == false && isTestCategoryLengthEqualsNull == true && (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'dev')}
            }
       steps {
                echo '----MasterDevNotGitNoParam-----'
            }
   }
  stage('MasterDevNotGitParam') {

       when {               
                //expression { return env.BRANCH_NAME != 'master' && env.BRANCH_NAME != 'dev'}
                expression { return isTriggeredByGit == false && isTestCategoryLengthEqualsNull == false && (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'dev')}
            }
       steps {
                echo '----MasterDevNotGitParam-----'
            }
   }

           


}

}
